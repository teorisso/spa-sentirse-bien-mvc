@model List<SpaAdmin.Models.TurnoDto>
@{
    ViewData["Title"] = "Gestión de Turnos";
}

<h2>Gestión de Turnos</h2>

<form class="row g-3 mb-4">
    <div class="col-md-3">
        <label class="form-label">Estado</label>
        <select name="estado" class="form-select" onchange="this.form.submit()">
            <option value="todos"         selected="@("todos"==ViewBag.EstadoActual)">Todos</option>
            <option value="pendiente"     selected="@("pendiente"==ViewBag.EstadoActual)">Pendiente</option>
            <option value="confirmado"    selected="@("confirmado"==ViewBag.EstadoActual)">Confirmado</option>
            <option value="realizado"     selected="@("realizado"==ViewBag.EstadoActual)">Realizado</option>
            <option value="cancelado"     selected="@("cancelado"==ViewBag.EstadoActual)">Cancelado</option>
        </select>
    </div>
    <div class="col-md-3">
        <label class="form-label">Fecha</label>
        <input type="date" name="fecha" class="form-control"
               value="@ViewBag.FechaActual" onchange="this.form.submit()"/>
    </div>
</form>

<table class="table table-bordered table-hover">
    <thead class="table-light">
        <tr>
            <th>Cliente</th>
            <th>Servicio</th>
            <th>Profesional</th>
            <th>Fecha</th>
            <th>Hora</th>
            <th>Estado</th>
            <th>Check-in QR</th>
        </tr>
    </thead>
    <tbody>
@foreach (var t in Model)
{
    <tr>
        <td>@(t.Cliente?.FirstName) @(t.Cliente?.LastName)</td>
        <td>@t.Servicio?.Nombre</td>
        <td>@(t.Profesional?.FirstName) @(t.Profesional?.LastName)</td>
        <td>@t.Fecha.ToString("dd/MM/yyyy")</td>
        <td>@t.Hora</td>
        <td>
            <span class="badge bg-@(GetStatusColor(t.Estado))">@t.Estado</span>
        </td>
        <td>
            @if (t.Estado == "confirmado")
            {
                <button type="button" class="btn btn-sm btn-primary view-qr-btn" 
                        data-id="@t.Id" title="Ver QR de check-in">
                    <i class="bi bi-qr-code"></i> Ver QR
                </button>
            }
            else
            {
                <span class="text-muted small">Solo disponible para turnos confirmados</span>
            }
        </td>
    </tr>
}
    </tbody>
</table>

<!-- Modal QR actualizado -->
<div class="modal fade" id="qrModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
            <i class="bi bi-qr-code"></i> QR de Check-in
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body text-center">
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i>
            <strong>Check-in automático:</strong> El cliente debe escanear este QR al llegar
        </div>
        
        <img id="qrImage" class="img-fluid mb-3" alt="QR" style="max-width: 250px;"/>
        
        <div class="mb-3">
            <a id="qrLink" href="#" target="_blank" class="btn btn-outline-primary">
                <i class="bi bi-box-arrow-up-right"></i> Abrir enlace QR
            </a>
        </div>
        
        <div id="qrStatus" class="alert">
            <small id="qrExpires"></small>
        </div>
        
        <div class="mt-2">
            <small class="text-muted">
                <i class="bi bi-shield-check"></i> 
                QR único por turno • Válido 1 hora después del horario
            </small>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const modalElement = document.getElementById('qrModal');
        const qrModal = new bootstrap.Modal(modalElement);

        // Actualizar cada 30 segundos para mostrar botones actualizados
        setInterval(() => {
            window.location.reload();
        }, 30000);

        document.querySelectorAll('.view-qr-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const id = btn.getAttribute('data-id');
                
                // Cambiar estado del botón mientras carga
                btn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Cargando...';
                btn.disabled = true;
                
                try {
                    const res = await fetch('/Turnos/GetQRJson?id=' + id, { method: 'POST' });
                    let data = null;
                    if (res.ok) {
                        data = await res.json();
                    }

                    // Condición de éxito con data válida
                    if (res.ok && data && data.success && data.data) {
                        // Mostrar QR siempre
                        document.getElementById('qrImage').style.display = 'block';
                        document.getElementById('qrImage').src = 'data:image/png;base64,' + data.data.qrCodeImageBase64;
                        
                        const link = document.getElementById('qrLink');
                        link.href = data.data.qrCodeUrl;
                        link.style.display = 'inline-block';
                        
                        // Verificar si está expirado
                        const expiresAt = new Date(data.data.expiresAt);
                        const now = new Date();
                        const statusDiv = document.getElementById('qrStatus');
                        const expiresText = document.getElementById('qrExpires');
                        
                        if (now > expiresAt) {
                            // QR caducado
                            statusDiv.className = 'alert alert-danger';
                            expiresText.innerHTML = '<i class="bi bi-exclamation-triangle"></i> <strong>QR CADUCADO</strong> - Expiró el ' + expiresAt.toLocaleString() + '. Al escanearlo se marcará el turno como "no realizado".';
                        } else {
                            // QR activo
                            statusDiv.className = 'alert alert-success';
                            expiresText.innerHTML = '<i class="bi bi-check-circle"></i> <strong>QR ACTIVO</strong> - Válido hasta ' + expiresAt.toLocaleString();
                        }
                    } else {
                        // Caso de error / QR caducado / turno fuera de ventana
                        const msg = (data && data.message) ? data.message : 'El QR está caducado o el turno ha finalizado';
                        document.getElementById('qrImage').style.display = 'none';
                        document.getElementById('qrExpires').innerText = msg;
                        const link = document.getElementById('qrLink');
                        link.style.display = 'none';
                    }

                    // Mostrar el modal siempre
                    qrModal.show();
                } catch (error) {
                    // Error de red o excepción
                    document.getElementById('qrImage').style.display = 'none';
                    document.getElementById('qrExpires').innerText = 'No se pudo obtener el QR: ' + error.message;
                    const link = document.getElementById('qrLink');
                    link.style.display = 'none';
                    qrModal.show();
                } finally {
                    // Restaurar botón
                    btn.innerHTML = '<i class="bi bi-qr-code"></i> Ver QR';
                    btn.disabled = false;
                }
            });
        });
    });
</script>
}

@functions {
    string GetStatusColor(string estado)
    {
        return estado switch
        {
            "pendiente" => "warning",
            "confirmado" => "success",
            "realizado" => "primary",
            "cancelado" => "danger",
            _ => "secondary"
        };
    }
}